<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Arron&#39;s Lab</title>
  
  <link href="/lunstd/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-12T13:10:13.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>a dba&#39;s blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ClickHouse安装</title>
    <link href="http://yoursite.com/2017/08/12/clickhouse-1/"/>
    <id>http://yoursite.com/2017/08/12/clickhouse-1/</id>
    <published>2017-08-12T13:06:30.000Z</published>
    <updated>2017-08-12T13:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>目前ClickHouse对ubuntu系统支持比较友好，对于centos就差一点。Ubuntu有deb包可以直接安装。对于centos的则需要自己编译。</p>
<a id="more"></a>
<h2 id="一、安装准备"><a href="#一、安装准备" class="headerlink" title="一、安装准备"></a>一、安装准备</h2><h3 id="1-升级gcc"><a href="#1-升级gcc" class="headerlink" title="1. 升级gcc"></a>1. 升级gcc</h3><p>编译ClickHouse需要gcc 6.0以上版本，这里安装6.2.0版本。具体步骤记录如下：</p>
<h4 id="1-1-下载-gcc-6-2-0-源码包-并解压"><a href="#1-1-下载-gcc-6-2-0-源码包-并解压" class="headerlink" title="1.1 下载 gcc-6.2.0 源码包, 并解压"></a>1.1 下载 gcc-6.2.0 源码包, 并解压</h4><pre><code>[root@node1 software]# wget http://ftp.gnu.org/gnu/gcc/gcc-6.2.0/gcc-6.2.0.tar.bz2
[root@node1 software]# tar -jvxf gcc-6.2.0.tar.bz2
[root@node1 software]# cd gcc-6.2.0/
[root@node1 contrib]# vim contrib/download_prerequisites
从 contrib/download_prerequisites 文件内查看需要的依赖包
</code></pre><h4 id="1-2-下载依赖包"><a href="#1-2-下载依赖包" class="headerlink" title="1.2 下载依赖包"></a>1.2 下载依赖包</h4><pre><code>[root@node1 software]# wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-2.4.2.tar.bz2 [root@node1 software]# wget ftp://gcc.gnu.org/pub/gcc/infrastructure/gmp-4.3.2.tar.bz2
[root@node1 software]# wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-0.8.1.tar.gz
</code></pre><h4 id="1-3-安装gmp"><a href="#1-3-安装gmp" class="headerlink" title="1.3 安装gmp"></a>1.3 安装gmp</h4><pre><code>[root@node1 software]# bzip2 -d gmp-4.3.2.tar.bz2
[root@node1 software]# tar xvf gmp-4.3.2.tar
[root@node1 software]# cd gmp-4.3.2/
[root@node1 gmp-4.3.2]# ./configure --prefix=/opt/gcc-6.2.0
[root@node1 gmp-4.3.2]# make &amp;&amp; make install
</code></pre><h4 id="1-4-安装mpfr"><a href="#1-4-安装mpfr" class="headerlink" title="1.4 安装mpfr"></a>1.4 安装mpfr</h4><pre><code>[root@node1 gmp-4.3.2]# cd ..
[root@node1 software]# bzip2 -d mpfr-2.4.2.tar.bz2
[root@node1 software]# tar xvf mpfr-2.4.2.tar
[root@node1 software]# cd mpfr-2.4.2/
[root@node1 mpfr-2.4.2]# ./configure --prefix=/opt/gcc-6.2.0 --with-gmp=/opt/gcc-6.2.0
[root@node1 mpfr-2.4.2]# make -j
[root@node1 mpfr-2.4.2]# make install
</code></pre><h4 id="1-5-安装mpc"><a href="#1-5-安装mpc" class="headerlink" title="1.5 安装mpc"></a>1.5 安装mpc</h4><pre><code>[root@node1 mpfr-2.4.2]# cd ..
[root@node1 software]# tar xvf mpc-0.8.1.tar.gz
[root@node1 software]# cd mpc-0.8.1/
[root@node1 mpc-0.8.1]# ./configure --prefix=/opt/gcc-6.2.0 --with-gmp=/opt/gcc-6.2.0 --with-mpfr=/opt/gcc-6.2.0
[root@node1 mpc-0.8.1]# make -j
[root@node1 mpc-0.8.1]# make install
</code></pre><h4 id="1-6-安装gcc"><a href="#1-6-安装gcc" class="headerlink" title="1.6 安装gcc"></a>1.6 安装gcc</h4><pre><code>[root@node1 mpc-0.8.1]# cd ..
[root@node1 software]# cd gcc-6.2.0/
[root@node1 gcc-6.2.0]# mkdir build
[root@node1 gcc-6.2.0]# cd build/
[root@node1 build]# ../configure --prefix=/opt/gcc-6.2.0 --with-gmp=/opt/gcc-6.2.0 --with-mpfr=/opt/gcc-6.2.0 --with-mpc=/opt/gcc-6.2.0 -enable-checking=release -enable-languages=c,c++ -disable-multilib
[root@node1 build]# make
[root@node1 build]# make install
</code></pre><p><strong>注意：</strong><br>编译过程中可能会出现类似下面的错误：</p>
<pre><code>checking for suffix of object files... configure: error: cannot compute suffix of object files: cannot compile

See `config.log&apos; for more details.

make[2]: *** [configure-stage1-target-libgcc] Error 1
</code></pre><p>解决方法：<br>将gmp,mpfr,mpc的lib库添加到下面的配置文件中</p>
<pre><code>vi /etc/ld.so.conf
include ld.so.conf.d/*.conf
/usr/local/lib
/opt/gcc-6.2.0/lib   #gmp,mpfr,mpc的lib库安装位置
/usr/lib64

添加保存后记得更新动态库的缓存：
# ldconfig -v
更新后再去重新编译安装。
</code></pre><h4 id="1-7-设置环境变量"><a href="#1-7-设置环境变量" class="headerlink" title="1.7 设置环境变量"></a>1.7 设置环境变量</h4><pre><code>[root@node1 software]# export PATH=/opt/gcc-6.2.0/bin:$PATH
[root@node1 software]# export LD_LIBRARY_PATH=/opt/gcc-6.2.0/lib:$LD_LIBRARY_PATH
</code></pre><h4 id="1-8-查看gcc版本"><a href="#1-8-查看gcc版本" class="headerlink" title="1.8 查看gcc版本"></a>1.8 查看gcc版本</h4><pre><code>[root@node1 ~]# gcc -v
</code></pre><h4 id="1-9-创建软链和环境变量"><a href="#1-9-创建软链和环境变量" class="headerlink" title="1.9 创建软链和环境变量"></a>1.9 创建软链和环境变量</h4><pre><code>[root@node1 ~]# ln -s /usr/local/bin/gcc /usr/local/bin/gcc-6
[root@node1 ~]# ln -s /usr/local/bin/g++ /usr/local/bin/g++-6
[root@node1 ~]# ln -s /usr/local/bin/gcc /usr/local/bin/cc
[root@node1 ~]# ln -s /usr/local/bin/g++ /usr/local/bin/c++
[root@node1 ~]# export CC=gcc-6
[root@node1 ~]# export CXX=g++-6
</code></pre><h3 id="2-安装其他库依赖包"><a href="#2-安装其他库依赖包" class="headerlink" title="2. 安装其他库依赖包"></a>2. 安装其他库依赖包</h3><pre><code>[root@node1 ~]# yum install libicu-devel readline-devel openssl-devel mysql-community-devel unixODBC-devel libtool-ltdl-devel
</code></pre><h2 id="二、安装ClickHouse"><a href="#二、安装ClickHouse" class="headerlink" title="二、安装ClickHouse"></a>二、安装ClickHouse</h2><h3 id="1-下载源码"><a href="#1-下载源码" class="headerlink" title="1. 下载源码"></a>1. 下载源码</h3><pre><code>[root@node1 software]# git clone -b stable https://github.com/yandex/ClickHouse.git
[root@node1 software]# cd ClickHouse
</code></pre><h3 id="2-编译源码"><a href="#2-编译源码" class="headerlink" title="2. 编译源码"></a>2. 编译源码</h3><pre><code>mkdir build
cd build
cmake ..
make -j $THREADS
make install
</code></pre><p><strong>注意：</strong></p>
<blockquote>
<p>在编译过程中发现对内存的消耗比较大，本人虚机开始配置1G内存，编译时经常莫名的中断报错，后查/var/log/message发现出现OOM情况，后把内存加大到4G，能够正常完成编译</p>
</blockquote>
<h2 id="三、简单使用"><a href="#三、简单使用" class="headerlink" title="三、简单使用"></a>三、简单使用</h2><h3 id="1-启动clickhouse"><a href="#1-启动clickhouse" class="headerlink" title="1. 启动clickhouse"></a>1. 启动clickhouse</h3><pre><code>[root@node1 ~]# /usr/local/bin/clickhouse-server --config-file=/usr/local/etc/clickhouse-server/config.xml &amp;
</code></pre><h3 id="2-登录测试"><a href="#2-登录测试" class="headerlink" title="2. 登录测试"></a>2. 登录测试</h3><pre><code>[root@node1 ~]# clickhouse-client
ClickHouse client version 1.1.54245.
Connecting to localhost:9000.
Connected to ClickHouse server version 1.1.54245.

:) select 1;

SELECT 1

┌─1─┐
│ 1 │
└───┘

1 rows in set. Elapsed: 0.002 sec.

:) select now();

SELECT now()

┌───────────────now()─┐
│ 2017-08-09 23:27:30 │
└─────────────────────┘

1 rows in set. Elapsed: 0.001 sec.

:)
</code></pre><h3 id="3-客户端使用"><a href="#3-客户端使用" class="headerlink" title="3. 客户端使用"></a>3. 客户端使用</h3><h4 id="3-1-交互模式"><a href="#3-1-交互模式" class="headerlink" title="3.1 交互模式"></a>3.1 交互模式</h4><pre><code>clickhouse-client
clickhouse-client --host=... --port=... --user=... --password=...
</code></pre><h4 id="3-2-启动多行查询"><a href="#3-2-启动多行查询" class="headerlink" title="3.2 启动多行查询"></a>3.2 启动多行查询</h4><pre><code>clickhouse-client -m
</code></pre><p>对于使用多行建表语句进行建表的时候就需要启用多行查询，否则会报错</p>
<h4 id="3-3-以批处理方式运行查询"><a href="#3-3-以批处理方式运行查询" class="headerlink" title="3.3 以批处理方式运行查询"></a>3.3 以批处理方式运行查询</h4><pre><code>clickhouse-client --query=&apos;SELECT 1&apos;
echo &apos;SELECT 1&apos; | clickhouse-client
</code></pre><h4 id="3-4-从指定格式的文件插入数据"><a href="#3-4-从指定格式的文件插入数据" class="headerlink" title="3.4 从指定格式的文件插入数据"></a>3.4 从指定格式的文件插入数据</h4><pre><code>clickhouse-client --query=&apos;INSERT INTO table VALUES&apos; &lt; data.txt
clickhouse-client --query=&apos;INSERT INTO table FORMAT TabSeparated&apos; &lt; data.tsv
</code></pre><h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul>
<li><a href="https://www.percona.com/blog/2017/03/17/column-store-database-benchmarks-mariadb-columnstore-vs-clickhouse-vs-apache-spark/" target="_blank" rel="external">Column Store Database Benchmarks: MariaDB ColumnStore vs. Clickhouse vs. Apache Spark</a></li>
<li><a href="https://www.percona.com/blog/2017/02/13/clickhouse-new-opensource-columnar-database/" target="_blank" rel="external">ClickHouse: New Open Source Columnar Database</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/22165241" target="_blank" rel="external">彪悍开源的分析数据库-ClickHouse</a></li>
<li><a href="https://clickhouse.yandex/docs/en/development/build.html" target="_blank" rel="external">How to build ClickHouse on Linux</a></li>
<li><a href="http://www.cnblogs.com/gomysql/p/6651513.html" target="_blank" rel="external">ClickHouse之初步认识</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前ClickHouse对ubuntu系统支持比较友好，对于centos就差一点。Ubuntu有deb包可以直接安装。对于centos的则需要自己编译。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/08/12/hello-world/"/>
    <id>http://yoursite.com/2017/08/12/hello-world/</id>
    <published>2017-08-12T07:41:49.000Z</published>
    <updated>2017-08-12T07:41:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
